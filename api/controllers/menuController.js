import { menuRepository } from '../repositories/MenuRepository.js'

/**
 * üîÑ GET /menus
 * R√©cup√®re tous les menus tri√©s par position
 */
export const listMenus = (req, res) => {
    try {
        const menus = menuRepository.findAll()
        res.json(menus)
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des menus' })
    }
}

/**
 * üîÑ GET /menus/:id
 * R√©cup√®re un menu par son ID
 */
export const getMenuById = (req, res) => {
    try {
        const menu = menuRepository.findById(req.params.id)
        if (!menu) return res.status(404).json({ error: 'Menu non trouv√©' })
        res.json(menu)
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du menu' })
    }
}

/**
 * üÜï POST /menus
 * Cr√©e un nouveau menu (admin uniquement)
 */
export const createMenu = (req, res) => {
    try {
        const menu = menuRepository.create(req.body)
        res.status(201).json(menu)
    } catch (error) {
        console.error(error)
        res.status(400).json({ error: 'Erreur lors de la cr√©ation du menu' })
    }
}

/**
 * ‚úèÔ∏è PUT /menus/:id
 * Met √† jour un menu (admin uniquement)
 */
export const updateMenu = (req, res) => {
    try {
        const menu = menuRepository.update(req.params.id, req.body)
        res.json(menu)
    } catch (error) {
        console.error(error)
        res.status(400).json({ error: 'Erreur lors de la mise √† jour du menu' })
    }
}

/**
 * üóëÔ∏è DELETE /menus/:id
 * Supprime un menu (admin uniquement)
 */
export const deleteMenu = (req, res) => {
    try {
        const deleted = menuRepository.delete(req.params.id)
        if (!deleted) return res.status(404).json({ error: 'Menu introuvable ou d√©j√† supprim√©' })
        res.status(204).send()
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Erreur lors de la suppression du menu' })
    }
}
